# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from link_com/heartbag.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class heartbag(genpy.Message):
  _md5sum = "3975ec5bee3b3f6b04685f86ab5e40e0"
  _type = "link_com/heartbag"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#kpa 真空度(0 ~ -100kpa)
#io[x] = 0 代表第x腿吸盘与真空泵连通，吸盘与放气端口之间阻塞; io[x] = 1 代表第x腿吸盘与放气端口连通，吸盘与真空泵之间阻塞

float32 kpa
uint8[7] io
"""
  __slots__ = ['kpa','io']
  _slot_types = ['float32','uint8[7]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kpa,io

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(heartbag, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.kpa is None:
        self.kpa = 0.
      if self.io is None:
        self.io = chr(0)*7
    else:
      self.kpa = 0.
      self.io = chr(0)*7

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_f.pack(self.kpa))
      _x = self.io
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_7B.pack(*_x))
      else:
        buff.write(_struct_7s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.kpa,) = _struct_f.unpack(str[start:end])
      start = end
      end += 7
      self.io = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_f.pack(self.kpa))
      _x = self.io
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_7B.pack(*_x))
      else:
        buff.write(_struct_7s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.kpa,) = _struct_f.unpack(str[start:end])
      start = end
      end += 7
      self.io = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7s = struct.Struct("<7s")
_struct_7B = struct.Struct("<7B")
_struct_f = struct.Struct("<f")
