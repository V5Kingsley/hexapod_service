// Auto-generated. Do not edit!

// (in-package hexapodservice.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let leg = require('./leg.js');

//-----------------------------------------------------------

class hexapodserviceFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.ALLLEGS_fdbk = null;
    }
    else {
      if (initObj.hasOwnProperty('ALLLEGS_fdbk')) {
        this.ALLLEGS_fdbk = initObj.ALLLEGS_fdbk
      }
      else {
        this.ALLLEGS_fdbk = new leg();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type hexapodserviceFeedback
    // Serialize message field [ALLLEGS_fdbk]
    bufferOffset = leg.serialize(obj.ALLLEGS_fdbk, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type hexapodserviceFeedback
    let len;
    let data = new hexapodserviceFeedback(null);
    // Deserialize message field [ALLLEGS_fdbk]
    data.ALLLEGS_fdbk = leg.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 32;
  }

  static datatype() {
    // Returns string type for a message object
    return 'hexapodservice/hexapodserviceFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '403f7a6b04ba80a9669cf3a75e8e9e8d';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    hexapodservice/leg ALLLEGS_fdbk
    
    
    ================================================================================
    MSG: hexapodservice/leg
    hexapodservice/legjoint[6] leg
    
    ================================================================================
    MSG: hexapodservice/legjoint
    float64 coxa
    float64 femur
    float64 tibia
    float64 tarsus
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new hexapodserviceFeedback(null);
    if (msg.ALLLEGS_fdbk !== undefined) {
      resolved.ALLLEGS_fdbk = leg.Resolve(msg.ALLLEGS_fdbk)
    }
    else {
      resolved.ALLLEGS_fdbk = new leg()
    }

    return resolved;
    }
};

module.exports = hexapodserviceFeedback;
