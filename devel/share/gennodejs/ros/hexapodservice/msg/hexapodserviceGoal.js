// Auto-generated. Do not edit!

// (in-package hexapodservice.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let legjoints = require('./legjoints.js');
let legs = require('./legs.js');

//-----------------------------------------------------------

class hexapodserviceGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.MODE = null;
      this.SIMPLEMOTION_MODE = null;
      this.MAXPOINTS = null;
      this.LEG_INDEX = null;
      this.ONELEG = null;
      this.ALLLEGS = null;
    }
    else {
      if (initObj.hasOwnProperty('MODE')) {
        this.MODE = initObj.MODE
      }
      else {
        this.MODE = 0;
      }
      if (initObj.hasOwnProperty('SIMPLEMOTION_MODE')) {
        this.SIMPLEMOTION_MODE = initObj.SIMPLEMOTION_MODE
      }
      else {
        this.SIMPLEMOTION_MODE = 0;
      }
      if (initObj.hasOwnProperty('MAXPOINTS')) {
        this.MAXPOINTS = initObj.MAXPOINTS
      }
      else {
        this.MAXPOINTS = 0;
      }
      if (initObj.hasOwnProperty('LEG_INDEX')) {
        this.LEG_INDEX = initObj.LEG_INDEX
      }
      else {
        this.LEG_INDEX = 0;
      }
      if (initObj.hasOwnProperty('ONELEG')) {
        this.ONELEG = initObj.ONELEG
      }
      else {
        this.ONELEG = new legjoints();
      }
      if (initObj.hasOwnProperty('ALLLEGS')) {
        this.ALLLEGS = initObj.ALLLEGS
      }
      else {
        this.ALLLEGS = new legs();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type hexapodserviceGoal
    // Serialize message field [MODE]
    bufferOffset = _serializer.int32(obj.MODE, buffer, bufferOffset);
    // Serialize message field [SIMPLEMOTION_MODE]
    bufferOffset = _serializer.int32(obj.SIMPLEMOTION_MODE, buffer, bufferOffset);
    // Serialize message field [MAXPOINTS]
    bufferOffset = _serializer.int32(obj.MAXPOINTS, buffer, bufferOffset);
    // Serialize message field [LEG_INDEX]
    bufferOffset = _serializer.int32(obj.LEG_INDEX, buffer, bufferOffset);
    // Serialize message field [ONELEG]
    bufferOffset = legjoints.serialize(obj.ONELEG, buffer, bufferOffset);
    // Serialize message field [ALLLEGS]
    bufferOffset = legs.serialize(obj.ALLLEGS, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type hexapodserviceGoal
    let len;
    let data = new hexapodserviceGoal(null);
    // Deserialize message field [MODE]
    data.MODE = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [SIMPLEMOTION_MODE]
    data.SIMPLEMOTION_MODE = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [MAXPOINTS]
    data.MAXPOINTS = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [LEG_INDEX]
    data.LEG_INDEX = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [ONELEG]
    data.ONELEG = legjoints.deserialize(buffer, bufferOffset);
    // Deserialize message field [ALLLEGS]
    data.ALLLEGS = legs.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += legjoints.getMessageSize(object.ONELEG);
    length += legs.getMessageSize(object.ALLLEGS);
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'hexapodservice/hexapodserviceGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '31dfab14f36d4b9186c0a13e789e9115';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    int32 MODE 
    int32 SIMPLEMOTION_MODE
    int32 MAXPOINTS
    int32 LEG_INDEX
    hexapodservice/legjoints ONELEG
    hexapodservice/legs ALLLEGS
    
    ================================================================================
    MSG: hexapodservice/legjoints
    int64[] coxa
    int64[] femur
    int64[] tibia
    int64[] tarsus
    
    ================================================================================
    MSG: hexapodservice/legs
    hexapodservice/legjoints[6] leg
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new hexapodserviceGoal(null);
    if (msg.MODE !== undefined) {
      resolved.MODE = msg.MODE;
    }
    else {
      resolved.MODE = 0
    }

    if (msg.SIMPLEMOTION_MODE !== undefined) {
      resolved.SIMPLEMOTION_MODE = msg.SIMPLEMOTION_MODE;
    }
    else {
      resolved.SIMPLEMOTION_MODE = 0
    }

    if (msg.MAXPOINTS !== undefined) {
      resolved.MAXPOINTS = msg.MAXPOINTS;
    }
    else {
      resolved.MAXPOINTS = 0
    }

    if (msg.LEG_INDEX !== undefined) {
      resolved.LEG_INDEX = msg.LEG_INDEX;
    }
    else {
      resolved.LEG_INDEX = 0
    }

    if (msg.ONELEG !== undefined) {
      resolved.ONELEG = legjoints.Resolve(msg.ONELEG)
    }
    else {
      resolved.ONELEG = new legjoints()
    }

    if (msg.ALLLEGS !== undefined) {
      resolved.ALLLEGS = legs.Resolve(msg.ALLLEGS)
    }
    else {
      resolved.ALLLEGS = new legs()
    }

    return resolved;
    }
};

module.exports = hexapodserviceGoal;
