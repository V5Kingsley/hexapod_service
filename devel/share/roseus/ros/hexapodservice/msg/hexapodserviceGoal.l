;; Auto-generated. Do not edit!


(when (boundp 'hexapodservice::hexapodserviceGoal)
  (if (not (find-package "HEXAPODSERVICE"))
    (make-package "HEXAPODSERVICE"))
  (shadow 'hexapodserviceGoal (find-package "HEXAPODSERVICE")))
(unless (find-package "HEXAPODSERVICE::HEXAPODSERVICEGOAL")
  (make-package "HEXAPODSERVICE::HEXAPODSERVICEGOAL"))

(in-package "ROS")
;;//! \htmlinclude hexapodserviceGoal.msg.html


(defclass hexapodservice::hexapodserviceGoal
  :super ros::object
  :slots (_MODE _SIMPLEMOTION_MODE _MAXPOINTS _LEG_INDEX _ONELEG _ALLLEGS ))

(defmethod hexapodservice::hexapodserviceGoal
  (:init
   (&key
    ((:MODE __MODE) 0)
    ((:SIMPLEMOTION_MODE __SIMPLEMOTION_MODE) 0)
    ((:MAXPOINTS __MAXPOINTS) 0)
    ((:LEG_INDEX __LEG_INDEX) 0)
    ((:ONELEG __ONELEG) (instance hexapodservice::legjoints :init))
    ((:ALLLEGS __ALLLEGS) (instance hexapodservice::legs :init))
    )
   (send-super :init)
   (setq _MODE (round __MODE))
   (setq _SIMPLEMOTION_MODE (round __SIMPLEMOTION_MODE))
   (setq _MAXPOINTS (round __MAXPOINTS))
   (setq _LEG_INDEX (round __LEG_INDEX))
   (setq _ONELEG __ONELEG)
   (setq _ALLLEGS __ALLLEGS)
   self)
  (:MODE
   (&optional __MODE)
   (if __MODE (setq _MODE __MODE)) _MODE)
  (:SIMPLEMOTION_MODE
   (&optional __SIMPLEMOTION_MODE)
   (if __SIMPLEMOTION_MODE (setq _SIMPLEMOTION_MODE __SIMPLEMOTION_MODE)) _SIMPLEMOTION_MODE)
  (:MAXPOINTS
   (&optional __MAXPOINTS)
   (if __MAXPOINTS (setq _MAXPOINTS __MAXPOINTS)) _MAXPOINTS)
  (:LEG_INDEX
   (&optional __LEG_INDEX)
   (if __LEG_INDEX (setq _LEG_INDEX __LEG_INDEX)) _LEG_INDEX)
  (:ONELEG
   (&rest __ONELEG)
   (if (keywordp (car __ONELEG))
       (send* _ONELEG __ONELEG)
     (progn
       (if __ONELEG (setq _ONELEG (car __ONELEG)))
       _ONELEG)))
  (:ALLLEGS
   (&rest __ALLLEGS)
   (if (keywordp (car __ALLLEGS))
       (send* _ALLLEGS __ALLLEGS)
     (progn
       (if __ALLLEGS (setq _ALLLEGS (car __ALLLEGS)))
       _ALLLEGS)))
  (:serialization-length
   ()
   (+
    ;; int32 _MODE
    4
    ;; int32 _SIMPLEMOTION_MODE
    4
    ;; int32 _MAXPOINTS
    4
    ;; int32 _LEG_INDEX
    4
    ;; hexapodservice/legjoints _ONELEG
    (send _ONELEG :serialization-length)
    ;; hexapodservice/legs _ALLLEGS
    (send _ALLLEGS :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _MODE
       (write-long _MODE s)
     ;; int32 _SIMPLEMOTION_MODE
       (write-long _SIMPLEMOTION_MODE s)
     ;; int32 _MAXPOINTS
       (write-long _MAXPOINTS s)
     ;; int32 _LEG_INDEX
       (write-long _LEG_INDEX s)
     ;; hexapodservice/legjoints _ONELEG
       (send _ONELEG :serialize s)
     ;; hexapodservice/legs _ALLLEGS
       (send _ALLLEGS :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _MODE
     (setq _MODE (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; int32 _SIMPLEMOTION_MODE
     (setq _SIMPLEMOTION_MODE (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; int32 _MAXPOINTS
     (setq _MAXPOINTS (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; int32 _LEG_INDEX
     (setq _LEG_INDEX (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; hexapodservice/legjoints _ONELEG
     (send _ONELEG :deserialize buf ptr-) (incf ptr- (send _ONELEG :serialization-length))
   ;; hexapodservice/legs _ALLLEGS
     (send _ALLLEGS :deserialize buf ptr-) (incf ptr- (send _ALLLEGS :serialization-length))
   ;;
   self)
  )

(setf (get hexapodservice::hexapodserviceGoal :md5sum-) "31dfab14f36d4b9186c0a13e789e9115")
(setf (get hexapodservice::hexapodserviceGoal :datatype-) "hexapodservice/hexapodserviceGoal")
(setf (get hexapodservice::hexapodserviceGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
int32 MODE 
int32 SIMPLEMOTION_MODE
int32 MAXPOINTS
int32 LEG_INDEX
hexapodservice/legjoints ONELEG
hexapodservice/legs ALLLEGS

================================================================================
MSG: hexapodservice/legjoints
int64[] coxa
int64[] femur
int64[] tibia
int64[] tarsus

================================================================================
MSG: hexapodservice/legs
hexapodservice/legjoints[6] leg

")



(provide :hexapodservice/hexapodserviceGoal "31dfab14f36d4b9186c0a13e789e9115")


