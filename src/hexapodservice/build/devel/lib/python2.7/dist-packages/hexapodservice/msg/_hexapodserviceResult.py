# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hexapodservice/hexapodserviceResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hexapodservice.msg

class hexapodserviceResult(genpy.Message):
  _md5sum = "9159b5bfa0e50cc64f02e08ee55d9428"
  _type = "hexapodservice/hexapodserviceResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
hexapodservice/legjoint ONELEG_fdbk
hexapodservice/leg ALLLEGS_fdbk
string result
int32 status
int64 freespace
int64 minimumBufferFreeBytes
int32 maxpoints
bool motionActive

================================================================================
MSG: hexapodservice/legjoint
float64 coxa
float64 femur
float64 tibia
float64 tarsus

================================================================================
MSG: hexapodservice/leg
hexapodservice/legjoint[6] leg
"""
  __slots__ = ['ONELEG_fdbk','ALLLEGS_fdbk','result','status','freespace','minimumBufferFreeBytes','maxpoints','motionActive']
  _slot_types = ['hexapodservice/legjoint','hexapodservice/leg','string','int32','int64','int64','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ONELEG_fdbk,ALLLEGS_fdbk,result,status,freespace,minimumBufferFreeBytes,maxpoints,motionActive

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hexapodserviceResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ONELEG_fdbk is None:
        self.ONELEG_fdbk = hexapodservice.msg.legjoint()
      if self.ALLLEGS_fdbk is None:
        self.ALLLEGS_fdbk = hexapodservice.msg.leg()
      if self.result is None:
        self.result = ''
      if self.status is None:
        self.status = 0
      if self.freespace is None:
        self.freespace = 0
      if self.minimumBufferFreeBytes is None:
        self.minimumBufferFreeBytes = 0
      if self.maxpoints is None:
        self.maxpoints = 0
      if self.motionActive is None:
        self.motionActive = False
    else:
      self.ONELEG_fdbk = hexapodservice.msg.legjoint()
      self.ALLLEGS_fdbk = hexapodservice.msg.leg()
      self.result = ''
      self.status = 0
      self.freespace = 0
      self.minimumBufferFreeBytes = 0
      self.maxpoints = 0
      self.motionActive = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d.pack(_x.ONELEG_fdbk.coxa, _x.ONELEG_fdbk.femur, _x.ONELEG_fdbk.tibia, _x.ONELEG_fdbk.tarsus))
      for val1 in self.ALLLEGS_fdbk.leg:
        _x = val1
        buff.write(_struct_4d.pack(_x.coxa, _x.femur, _x.tibia, _x.tarsus))
      _x = self.result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2qiB.pack(_x.status, _x.freespace, _x.minimumBufferFreeBytes, _x.maxpoints, _x.motionActive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ONELEG_fdbk is None:
        self.ONELEG_fdbk = hexapodservice.msg.legjoint()
      if self.ALLLEGS_fdbk is None:
        self.ALLLEGS_fdbk = hexapodservice.msg.leg()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.ONELEG_fdbk.coxa, _x.ONELEG_fdbk.femur, _x.ONELEG_fdbk.tibia, _x.ONELEG_fdbk.tarsus,) = _struct_4d.unpack(str[start:end])
      self.ALLLEGS_fdbk.leg = []
      for i in range(0, 6):
        val1 = hexapodservice.msg.legjoint()
        _x = val1
        start = end
        end += 32
        (_x.coxa, _x.femur, _x.tibia, _x.tarsus,) = _struct_4d.unpack(str[start:end])
        self.ALLLEGS_fdbk.leg.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result = str[start:end].decode('utf-8')
      else:
        self.result = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.status, _x.freespace, _x.minimumBufferFreeBytes, _x.maxpoints, _x.motionActive,) = _struct_i2qiB.unpack(str[start:end])
      self.motionActive = bool(self.motionActive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d.pack(_x.ONELEG_fdbk.coxa, _x.ONELEG_fdbk.femur, _x.ONELEG_fdbk.tibia, _x.ONELEG_fdbk.tarsus))
      for val1 in self.ALLLEGS_fdbk.leg:
        _x = val1
        buff.write(_struct_4d.pack(_x.coxa, _x.femur, _x.tibia, _x.tarsus))
      _x = self.result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_i2qiB.pack(_x.status, _x.freespace, _x.minimumBufferFreeBytes, _x.maxpoints, _x.motionActive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ONELEG_fdbk is None:
        self.ONELEG_fdbk = hexapodservice.msg.legjoint()
      if self.ALLLEGS_fdbk is None:
        self.ALLLEGS_fdbk = hexapodservice.msg.leg()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.ONELEG_fdbk.coxa, _x.ONELEG_fdbk.femur, _x.ONELEG_fdbk.tibia, _x.ONELEG_fdbk.tarsus,) = _struct_4d.unpack(str[start:end])
      self.ALLLEGS_fdbk.leg = []
      for i in range(0, 6):
        val1 = hexapodservice.msg.legjoint()
        _x = val1
        start = end
        end += 32
        (_x.coxa, _x.femur, _x.tibia, _x.tarsus,) = _struct_4d.unpack(str[start:end])
        self.ALLLEGS_fdbk.leg.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.result = str[start:end].decode('utf-8')
      else:
        self.result = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.status, _x.freespace, _x.minimumBufferFreeBytes, _x.maxpoints, _x.motionActive,) = _struct_i2qiB.unpack(str[start:end])
      self.motionActive = bool(self.motionActive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4d = struct.Struct("<4d")
_struct_i2qiB = struct.Struct("<i2qiB")
